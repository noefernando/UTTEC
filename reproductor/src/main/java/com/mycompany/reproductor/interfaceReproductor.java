/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.reproductor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import javax.swing.JPanel;
import javax.swing.Timer;
import javazoom.jl.player.advanced.AdvancedPlayer;
import javazoom.jl.player.advanced.PlaybackListener;
import javazoom.jl.player.advanced.PlaybackEvent;
import java.io.InputStream;
import javax.swing.ImageIcon;

/**
 *
 * @author neogt
 */
public class interfaceReproductor extends javax.swing.JFrame {
    private ReproductorDemo reproductor = new ReproductorDemo();
    private static final long serialVersionUID = 1L;
    private FondoAnimado fondo = new FondoAnimado();
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(interfaceReproductor.class.getName());
    private int totalFrames = 100000; // valor estimado, ajusta según tus MP3

    
    private int indexActual = 0;
    private String[] canciones = {
        "/music/Golden.mp3",
        "/music/HowItsDone.mp3",
        "/music/Takedown.mp3",
        "/music/YourIdol.mp3"
    };
    
    private String[] caratulas = {
        "/imagenes/Golden.jpg",
        "/imagenes/itsdone.png",
        "/imagenes/takedown.jpg",
        "/imagenes/youridol.jpg"
};

    /**
     * Creates new form interfaceReproductor
     */
    public interfaceReproductor() {
        initComponents();        // primero inicializa jPanel1 y botones

        // Establecer tamaño fijo del JLabel
        jLabelcaratula.setPreferredSize(new Dimension(166, 82));
        jLabelcaratula.setSize(166, 82);

        setContentPane(fondo);
        fondo.setLayout(new BorderLayout());
        fondo.add(jPanel1);     // ahora jPanel1 ya no es null
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabelcaratula = new javax.swing.JLabel();
        slidertiempo = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setOpaque(false);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Pause");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("prev");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Next");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Stop");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        slidertiempo.setMajorTickSpacing(10);
        slidertiempo.setMinorTickSpacing(1);
        slidertiempo.setPaintTicks(true);
        slidertiempo.setValue(0);
        slidertiempo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slidertiempoStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(jLabelcaratula, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(jButton4)
                .addGap(26, 26, 26))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slidertiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(46, 46, 46)
                        .addComponent(jButton2)))
                .addGap(220, 220, 220))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelcaratula, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(slidertiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addGap(20, 20, 20))
        );

        jLabelcaratula.getAccessibleContext().setAccessibleName("jLabelcaratula");
        slidertiempo.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Ruta del archivo MP3
        reproductor.reproducir(canciones[indexActual]);
        mostrarCaratula(caratulas[indexActual]);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            reproductor.pausa();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        reproductor.detener();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        reproductor.detener();
        indexActual = (indexActual + 1) % canciones.length;
        reproductor.reproducir(canciones[indexActual]);
        mostrarCaratula(caratulas[indexActual]);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        indexActual--;
        if (indexActual < 0) indexActual = canciones.length - 1;
        reproductor.detener();
        reproductor.reproducir(canciones[indexActual]);
        mostrarCaratula(caratulas[indexActual]);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void slidertiempoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slidertiempoStateChanged
        // TODO add your handling code here:
        if (!slidertiempo.getValueIsAdjusting()) {
            int porcentaje = slidertiempo.getValue();
            // llamar a tu método para adelantar/atrasar la canción
            moverAFrame(porcentaje);
}
    }//GEN-LAST:event_slidertiempoStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
        interfaceReproductor app = new interfaceReproductor();
        app.setVisible(true);
    });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabelcaratula;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider slidertiempo;
    // End of variables declaration//GEN-END:variables

    public class FondoAnimado extends JPanel {
    private float hue = 0f; // tono de color inicial

    public FondoAnimado() {
        Timer timer = new Timer(50, e -> {
            hue += 0.005f;
            if (hue > 1) hue = 0;
            repaint();
        });
        timer.start();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        Color c1 = Color.getHSBColor(hue, 0.6f, 1f);
        Color c2 = Color.getHSBColor((hue + 0.3f) % 1f, 0.6f, 1f);
        GradientPaint grad = new GradientPaint(0, 0, c1, getWidth(), getHeight(), c2);
        g2d.setPaint(grad);
        g2d.fillRect(0, 0, getWidth(), getHeight());
    }
}

    /**
     * @return the fondo
     */
    public FondoAnimado getFondo() {
        return fondo;
    }

    /**
     * @param fondo the fondo to set
     */
    public void setFondo(FondoAnimado fondo) {
        this.fondo = fondo;
    }
    

public static class ReproductorDemo {
    private AdvancedPlayer player;
    private Thread hilo;
    private String rutaActual;
    private int frameActual = 0; // frame donde pausó

    public void reproducir(String ruta) {
        try {
            // Si hay un player activo, cerrarlo
            detener();

            rutaActual = ruta;
            //FileInputStream fis = new FileInputStream(ruta);
            InputStream is = getClass().getResourceAsStream(rutaActual);

            player = new AdvancedPlayer(is);

            hilo = new Thread(() -> {
                try {
                    player.setPlayBackListener(new PlaybackListener() {
                        @Override
                        public void playbackFinished(PlaybackEvent evt) {
                            frameActual += evt.getFrame(); // guardar frame actual
                        }
                    });
                    player.play(frameActual, Integer.MAX_VALUE); // reanudar desde frameActual
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            hilo.start();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void detener() {
        if (player != null) {
            player.close();
            player = null;
        }
        if (hilo != null && hilo.isAlive()) {
            hilo.interrupt();
            hilo = null;
        }
        frameActual = 0;
    }

    public void pausa() {
        if (player != null) {
            try {
                player.close(); // guarda frameActual automáticamente
                player = null;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    public void reproducirDesdeFrame(int frame) {
    try {
        // Cierra el player actual
        if (player != null) {
            player.close();
        }
        frameActual = frame; // actualiza el frame actual
        //FileInputStream fis = new FileInputStream(rutaActual);
        InputStream is = getClass().getResourceAsStream(rutaActual);

        player = new AdvancedPlayer(is);
        
        hilo = new Thread(() -> {
            try {
                player.play(frameActual, Integer.MAX_VALUE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
        hilo.start();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
    
}
private void mostrarCaratula(String rutaImagen) {
    //ImageIcon icon = new ImageIcon(rutaImagen);
    ImageIcon icon = new ImageIcon(getClass().getResource(rutaImagen));
    Image img = icon.getImage().getScaledInstance(
        jLabelcaratula.getWidth(),
        jLabelcaratula.getHeight(),
        Image.SCALE_SMOOTH
    );
    jLabelcaratula.setIcon(new ImageIcon(img));
}
private void moverAFrame(int porcentaje) {
    if (reproductor != null) {
        int nuevoFrame = (int)(totalFrames * (porcentaje / 100.0));
        reproductor.reproducirDesdeFrame(nuevoFrame);
    }
}
        
}
